#Visualization Engine

#Parse The Trace files and collect Block Information and Time Stamps

import os.path
import sys
import shutil

runno=sys.argv[1:]
runno=map(str,runno)
runno=''.join(runno)

ftApploc="/home/tasu/Downloads/pin-3.0-76991-gcc-linux/Results/appTest/Traces"
ftOrLoc="/home/tasu/Downloads/pin-3.0-76991-gcc-linux/Results/Oracle/Traces"

deslocation="/home/tasu/Downloads/pin-3.0-76991-gcc-linux/Runs/Traces/TestFuzzer/Trace"+runno
if not os.path.exists(deslocation):
    os.makedirs(deslocation)

#Get the Total count of files in the folders and parse them

traceAppfileNames=[]
traceAppfilelocations=[]
traceOracleFileNames=[]
traceOracleFileLocations=[]

#Get All Traces generated by Pin for the Application under test
for name in os.listdir(ftApploc):
    traceAppfileNames.append(name)
    traceAppfilelocations.append(os.path.join(ftApploc,name))


#Get All Traces for oracle

for name in os.listdir(ftOrLoc):
    traceOracleFileNames.append(name)
    traceOracleFileLocations.append(os.path.join(ftOrLoc,name))


#Open Each Trace file for Ananlysis

##### For Application Under Test#########

for i in range(0, len(traceAppfileNames)):
    fttest=open(traceAppfilelocations[i], "r+")
    currfilename=traceAppfileNames[i]
    testarr=[]
    dictRes={}
    diccount={}
    countBlk=0
    for i in fttest.readlines():
        testarr.append(i)

    for i in range(0, len(testarr)):
        if "Block" in testarr[i]:
          currblk=testarr[i-1].strip("\n")
          currtime=testarr[i].split(" ")[1].strip("\n")
          dictRes[currblk]=currtime
          if currblk in diccount:
              #Update Value
              tempval=diccount[currblk]+1
              diccount[currblk]=tempval
          else:
              #Blk is not present
              countBlk+=1
              diccount[currblk]=countBlk



    firsttime=int(dictRes[str(1)])


    for key in dictRes:
        tempval=firsttime
        temptime=dictRes[key]
        actualtime=int(temptime)-tempval
        #update the Array
        dictRes[key]=actualtime

    #Write to a File
    FappTest=open("BlkTime"+currfilename, "w+")
    FappTest.write("BlkNumber,Time in Milliseconds,TimesAppeared")
    FappTest.write("\n")
    for key in dictRes:
        FappTest.write(key+","+str(dictRes[key])+","+str(diccount[key]))
        FappTest.write("\n")

    shutil.move("BlkTime"+currfilename, deslocation)


    FappTest.close()

