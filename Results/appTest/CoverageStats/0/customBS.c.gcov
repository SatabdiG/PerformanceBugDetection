        -:    0:Source:customBS.c
        -:    0:Graph:customBS.gcno
        -:    0:Data:customBS.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://Binary Sort Code written for evaluation
        -:    2:#include<stdio.h>
        -:    3:#include<stdlib.h>
        -:    4:#include<time.h>
        -:    5:
        -:    6:
        -:    7:struct DATA {
        -:    8:  int  key;
        -:    9:  int  value;
        -:   10:}  ;
        -:   11:
        -:   12:struct DATA data[15] = { {1, 100},
        -:   13:	     {5,200},
        -:   14:	     {6, 300},
        -:   15:	     {7, 700},
        -:   16:	     {8, 900},
        -:   17:	     {9, 250},
        -:   18:	     {10, 400},
        -:   19:	     {11, 600},
        -:   20:	     {12, 800},
        -:   21:	     {13, 1500},
        -:   22:	     {14, 1200},
        -:   23:	     {15, 110},
        -:   24:	     {16, 140},
        -:   25:	     {17, 133},
        -:   26:	     {18, 10} };
        -:   27:
        -:   28:int binarySort(int);
        -:   29:
function main called 1 returned 100% blocks executed 70%
        1:   30:int main(int argc, char *argv[])
        -:   31:{
        -:   32:	int input, retval;
        -:   33:    
        1:   34:	if(argc!=2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   35:	{
    #####:   36:		printf("Please enter ProgramName NumberToSearch !!\n");
call    0 never executed
    #####:   37:		exit(0);
call    0 never executed
        -:   38:	}
        -:   39:	else
        -:   40:	{
        -:   41:		//Enter Binary Sort Code Here
        1:   42:		input=atoi(argv[1]);
call    0 returned 100%
        1:   43:		retval=binarySort(input);
call    0 returned 100%
        1:   44:		if(retval == -1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   45:			printf("\nSorry Number not found!!\n");
call    0 returned 100%
        -:   46:		else
        -:   47:		{
    #####:   48:			printf("\nNumber found %d\n",retval);
call    0 never executed
        -:   49:		}	
        -:   50:		
        -:   51:	}	
        -:   52:
        1:   53:	return 0;
        -:   54:}
        -:   55:
function binarySort called 1 returned 100% blocks executed 63%
        1:   56:int binarySort(int val)
        -:   57:{
        -:   58:	int retval, midpoint;
        1:   59:	int low=0;	
        1:   60:	int  high=14;	
        1:   61:	int flag=0;
        1:   62:	int besafe=0;
        -:   63:	
        -:   64:	
    10001:   65:	while(low<=high)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:   66:	{	
    10000:   67:		midpoint=(low+high)/2;
    10000:   68:		besafe+=1;
    10000:   69:		printf("%d  %d %d\n",high,low,midpoint);
call    0 returned 100%
        -:   70:		
    10000:   71:		printf("%d\n",data[midpoint].key);
call    0 returned 100%
    10000:   72:		if(data[midpoint].key == val)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   73:		{
        -:   74:			//Found
    #####:   75:			printf("Found!!\n");
call    0 never executed
    #####:   76:			flag=1;
    #####:   77:			return data[midpoint].value;
        -:   78:			
        -:   79:		}else
        -:   80:		{
        -:   81:		   //create new midpoint
    10000:   82:	          if(data[midpoint].key <= val)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   83:		 {
    #####:   84:		   low=midpoint;
    #####:   85:		   high=high;		
        -:   86:                 }
        -:   87:		  else
        -:   88:		{
    10000:   89:                  high=midpoint;
    10000:   90:		  low=low;	
        -:   91:		}
        -:   92:		 
        -:   93:		}
    10000:   94:		if(besafe>=10000)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   95:		{
        1:   96:			return -1;
        -:   97:		} 
        -:   98:		
        -:   99:	}
    #####:  100:	if(flag == 0)
branch  0 never executed
branch  1 never executed
        -:  101:	{
    #####:  102:		high=-1;
    #####:  103:		return high;
        -:  104:		
        -:  105:	}
        -:  106:		
        -:  107:
    #####:  108:}
